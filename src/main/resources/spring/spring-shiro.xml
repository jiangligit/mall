<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!--6.配置shiro filter(过滤器),id必须和web.xml中DelegatingFilterProxy的filter-name一致 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>

        <!--配置登录页面-->
        <property name="loginUrl" value="/login.jsp"/>

        <!--配置没有权限的页面-->
        <property name="unauthorizedUrl" value="/unauthorizedUrl.jsp"/>



        <!--配置过滤器链(配置那些页面需要收到保护,以及访问这些页面需要的权限)，从上到下顺序执行-->
        <property name="filterChainDefinitions">
            <value>
                <!--anon 可以被匿名访问 -->
                <!--/js/** = anon
                /image/** = anon
                /css/** = anon-->
                <!--/** = authc 表明所有的url都要通过认证才能访问-->
                <!--
                配置哪些页面需要受保护.
                以及访问这些页面需要的权限.
                1). anon 可以被匿名访问
                2). authc 必须认证(即登录)后才可能访问的页面.
                3). logout 登出.
                4). roles 角色过滤器
                -->
                /login = anon
                /web/** = authc
                /user.jsp = roles[user]
                /admin.jsp = roles[admin]
                /** = authc
            </value>
        </property>

    </bean>
    <!--1.配置SecurityManager安全管理器-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!--配置认证和授权-->
<!--        <property name="realm" ref="myRealm"/>-->
        <property name="cacheManager" ref="cacheManager"/>
        <property name="authenticator" ref="authenticator"/>
        <property name="realms">
            <list>
                <ref bean="myRealm"/>
<!--                <ref bean="myRealmWithSHA1"/>-->
            </list>
        </property>
    </bean>

    <!--2.配置缓存CacheManager-->
    <!--2.1 需要EhCache的jar包及配置文件-->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <!-- Set a net.sf.ehcache.CacheManager instance here if you already have one.  If not, a new one
             will be creaed with a default config:
             <property name="cacheManager" ref="ehCacheManager"/> -->
        <!-- If you don't have a pre-built net.sf.ehcache.CacheManager instance to inject, but you want
             a specific Ehcache configuration to be used, specify that here.  If you don't, a default
             will be used.: -->
        <property name="cacheManagerConfigFile" value="classpath:spring/ehcache.xml"/>
    </bean>

    <bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
        <!--<property name="realms">
            <list>
                <ref bean="myRealm"/>
                <ref bean="myRealmWithSHA1"/>
            </list>
        </property>-->
        <!--配置认证策略-->
        <property name="authenticationStrategy">
            <bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"/>
        </property>
    </bean>
    <!--3.配置realm,自定义认证和授权,指定凭证匹配器-->
    <bean id="myRealm" class="com.rimi.mall.security.MyRealm">
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="MD5"/>
                <!--指定加密的次数-->
                <property name="hashIterations" value="1024"/>
            </bean>
        </property>
     </bean>
    <!--配置realm,自定义认证和授权,指定凭证匹配器,SHA1算法-->
    <bean id="myRealmWithSHA1" class="com.rimi.mall.security.MyRealmWithSHA1">
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="SHA1"/>
                <!--指定加密的次数-->
                <property name="hashIterations" value="1024"/>
            </bean>
        </property>
    </bean>
    <!--4.配置lifecycleBeanPostProcessor,可以自动的来调用配置在spring容器中shiro bean 的生命周期方法。-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!--5.启用ioc容器中使用shiro的注解，开启注解,配置了lifecycleBeanPostProcessor才可以使用-->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>

    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
</beans>